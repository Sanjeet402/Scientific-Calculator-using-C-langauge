import React, { createContext, useState } from "react";

export const CustomerContext = createContext();

const CustomerProvider = ({ children }) => {
  const [customers, setCustomers] = useState([
    {
      id: 1,
      firstName: "Sundar",
      lastName: "Pichai",
      email: "sundar.pichai@google.com",
      phone: "+1 9876543210",
      accounts: [
        { accNo: "1001999", type: "SAVINGS_ACCOUNT", branch: "Bellandur", balance: 1000 },
        { accNo: "1001888", type: "SAVINGS_ACCOUNT", branch: "Indira Nagar", balance: 2000 },
      ],
    },
    {
      id: 2,
      firstName: "John",
      lastName: "Doe",
      email: "john@gmail.com",
      phone: "+1 5551234567",
      accounts: [
        { accNo: "2001777", type: "CURRENT_ACCOUNT", branch: "Koramangala", balance: 5000 },
      ],
    },
  ]);

  return (
    <CustomerContext.Provider value={{ customers, setCustomers }}>
      {children}
    </CustomerContext.Provider>
  );
};

export default CustomerProvider;




import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import CustomerProvider from "./context/CustomerContext";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <BrowserRouter>
    <CustomerProvider>
      <App />
    </CustomerProvider>
  </BrowserRouter>
);

import React, { useContext, useState } from "react";
import { useNavigate } from "react-router-dom";
import { CustomerContext } from "../context/CustomerContext";

const Customers = () => {
  const { customers, setCustomers } = useContext(CustomerContext);
  const [form, setForm] = useState({ firstName: "", lastName: "", email: "", phone: "" });
  const [isEdit, setIsEdit] = useState(false);
  const [editId, setEditId] = useState(null);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (isEdit) {
      setCustomers(customers.map((c) => (c.id === editId ? { ...c, ...form } : c)));
      setIsEdit(false);
    } else {
      const newCustomer = {
        id: customers.length + 1,
        ...form,
        accounts: [], // empty account list for now
      };
      setCustomers([...customers, newCustomer]);
    }
    setForm({ firstName: "", lastName: "", email: "", phone: "" });
  };

  const handleEdit = (customer) => {
    setForm(customer);
    setEditId(customer.id);
    setIsEdit(true);
  };

  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this customer?")) {
      setCustomers(customers.filter((c) => c.id !== id));
    }
  };

  return (
    <div>
      <h2>Customers List</h2>
      <table border="1" cellPadding="8" width="100%">
        <thead>
          <tr>
            <th>Id</th><th>First Name</th><th>Last Name</th><th>Email</th><th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {customers.map((c) => (
            <tr key={c.id}>
              <td>{c.id}</td>
              <td>{c.firstName}</td>
              <td>{c.lastName}</td>
              <td>{c.email}</td>
              <td>
                <button onClick={() => navigate(`/customers/${c.id}`)}>Show</button>{" "}
                <button onClick={() => handleEdit(c)}>Edit</button>{" "}
                <button onClick={() => handleDelete(c.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <h3>{isEdit ? "Edit Customer" : "Add New Customer"}</h3>
      <form onSubmit={handleSubmit}>
        <input name="firstName" value={form.firstName} onChange={handleChange} placeholder="First Name" required />{" "}
        <input name="lastName" value={form.lastName} onChange={handleChange} placeholder="Last Name" required />{" "}
        <input name="email" value={form.email} onChange={handleChange} placeholder="Email" required />{" "}
        <input name="phone" value={form.phone} onChange={handleChange} placeholder="Phone" />{" "}
        <button type="submit">{isEdit ? "Update" : "Create"}</button>
      </form>
    </div>
  );
};

export default Customers;

import React, { useContext } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { CustomerContext } from "../context/CustomerContext";

const CustomerDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { customers } = useContext(CustomerContext);

  const customer = customers.find((c) => c.id === parseInt(id));

  if (!customer) {
    return (
      <div>
        <h2>Customer Not Found</h2>
        <button onClick={() => navigate("/customers")}>Back to Customers</button>
      </div>
    );
  }

  return (
    <div style={{ maxWidth: "800px", margin: "0 auto" }}>
      <button
        onClick={() => navigate("/customers")}
        style={{ marginBottom: "15px", color: "#004c91", border: "none", background: "none", cursor: "pointer" }}
      >
        ‚Üê Back to Customers List
      </button>

      <h2>Customer Details</h2>
      <table style={{ width: "100%", borderCollapse: "collapse", marginBottom: "30px" }}>
        <tbody>
          <tr><td><b>ID:</b></td><td>{customer.id}</td></tr>
          <tr><td><b>First Name:</b></td><td>{customer.firstName}</td></tr>
          <tr><td><b>Last Name:</b></td><td>{customer.lastName}</td></tr>
          <tr><td><b>Email:</b></td><td>{customer.email}</td></tr>
          <tr><td><b>Phone:</b></td><td>{customer.phone}</td></tr>
        </tbody>
      </table>

      <h3>List of Accounts</h3>
      {customer.accounts.length > 0 ? (
        <table border="1" cellPadding="8" width="100%">
          <thead style={{ backgroundColor: "#004c91", color: "white" }}>
            <tr>
              <th>Account No</th><th>Type</th><th>Branch</th><th>Balance</th>
            </tr>
          </thead>
          <tbody>
            {customer.accounts.map((acc, index) => (
              <tr key={index}>
                <td>{acc.accNo}</td>
                <td>{acc.type}</td>
                <td>{acc.branch}</td>
                <td>{acc.balance}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p>No accounts available.</p>
      )}
    </div>
  );
};

export default CustomerDetails;


