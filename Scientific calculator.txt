Controller
package com.payrollbackend.controller;

import com.payrollbackend.model.PayrollBatch;
import com.payrollbackend.model.PayrollBatchPayment;
import com.payrollbackend.service.PayrollBatchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/batch")
public class PayrollBatchController {

    private final PayrollBatchService batchService;

    @Autowired
    public PayrollBatchController(PayrollBatchService batchService) {
        this.batchService = batchService;
    }

    // CREATE a batch (with all payments)
    @PostMapping
    public PayrollBatch createBatch(@RequestBody PayrollBatch batch) {
        return batchService.saveBatch(batch);
    }

    // GET all batches
    @GetMapping
    public List<PayrollBatch> getAllBatches() {
        return batchService.getAllBatches();
    }

    // GET batch by batch reference (ID in table)
    @GetMapping("/{reference}")
    public PayrollBatch getBatchByReference(@PathVariable String reference) {
        Optional<PayrollBatch> batchOpt = batchService.getBatchByReference(reference);
        return batchOpt.orElse(null);
    }

    // GET all payments for batch
    @GetMapping("/{reference}/payments")
    public List<PayrollBatchPayment> getPaymentsByBatch(@PathVariable String reference) {
        Optional<PayrollBatch> batchOpt = batchService.getBatchByReference(reference);
        if (batchOpt.isPresent()) {
            return batchOpt.get().getPayments();
        }
        return null;
    }
}

PayrollBatch
package com.payrollbackend.model;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "payroll_batch")
public class PayrollBatch {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "batch_reference", unique = true, nullable = false)
    private String batchReference;

    @Column(name = "created_by", nullable = false)
    private String createdBy;

    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt;

    @Column(name = "debit_account", nullable = false)
    private String debitAccount;

    @Column(name = "max_debit_amount", nullable = false)
    private Double maxDebitAmount;

    @Column(name = "total_debit_amount", nullable = false)
    private Double totalDebitAmount;

    @Column(name = "status", nullable = false)
    private String status;

    @OneToMany(mappedBy = "batch", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonManagedReference
    private List<PayrollBatchPayment> payments;

    public PayrollBatch() {}

    // Getters and setters as before

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getBatchReference() { return batchReference; }
    public void setBatchReference(String batchReference) { this.batchReference = batchReference; }

    public String getCreatedBy() { return createdBy; }
    public void setCreatedBy(String createdBy) { this.createdBy = createdBy; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    public String getDebitAccount() { return debitAccount; }
    public void setDebitAccount(String debitAccount) { this.debitAccount = debitAccount; }

    public Double getMaxDebitAmount() { return maxDebitAmount; }
    public void setMaxDebitAmount(Double maxDebitAmount) { this.maxDebitAmount = maxDebitAmount; }

    public Double getTotalDebitAmount() { return totalDebitAmount; }
    public void setTotalDebitAmount(Double totalDebitAmount) { this.totalDebitAmount = totalDebitAmount; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public List<PayrollBatchPayment> getPayments() { return payments; }
    public void setPayments(List<PayrollBatchPayment> payments) { this.payments = payments; }
}

PayrollBatchPayment
package com.payrollbackend.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;

@Entity
@Table(name = "payroll_batch_payment")
public class PayrollBatchPayment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "batch_id", nullable = false)
    @JsonBackReference
    private PayrollBatch batch;

    @Column(name = "employee_id", nullable = false)
    private String employeeId;

    @Column(name = "employee_name", nullable = false)
    private String employeeName;

    @Column(name = "salary_amount", nullable = false)
    private Double salaryAmount;

    @Column(name = "currency", nullable = false)
    private String currency;

    @Column(name = "employee_account_no", nullable = false)
    private String employeeAccountNo;

    @Column(name = "status", nullable = false)
    private String status;

    public PayrollBatchPayment() {}

    // Getters and setters

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public PayrollBatch getBatch() { return batch; }
    public void setBatch(PayrollBatch batch) { this.batch = batch; }

    public String getEmployeeId() { return employeeId; }
    public void setEmployeeId(String employeeId) { this.employeeId = employeeId; }

    public String getEmployeeName() { return employeeName; }
    public void setEmployeeName(String employeeName) { this.employeeName = employeeName; }

    public Double getSalaryAmount() { return salaryAmount; }
    public void setSalaryAmount(Double salaryAmount) { this.salaryAmount = salaryAmount; }

    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }

    public String getEmployeeAccountNo() { return employeeAccountNo; }
    public void setEmployeeAccountNo(String employeeAccountNo) { this.employeeAccountNo = employeeAccountNo; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}

PayrollBatchPaymentRepository
package com.payrollbackend.repository;

import com.payrollbackend.model.PayrollBatchPayment;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface PayrollBatchPaymentRepository extends JpaRepository<PayrollBatchPayment, Long> {
    List<PayrollBatchPayment> findByBatch_BatchReference(String batchReference);

}
PayrollBatchRepository
package com.payrollbackend.repository;

import com.payrollbackend.model.PayrollBatch;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PayrollBatchRepository extends JpaRepository<PayrollBatch, Long> {
    PayrollBatch findByBatchReference(String batchReference);
}
PayrollBatchService
package com.payrollbackend.service;

import com.payrollbackend.model.PayrollBatch;
import com.payrollbackend.model.PayrollBatchPayment;
import com.payrollbackend.repository.PayrollBatchRepository;
import com.payrollbackend.repository.PayrollBatchPaymentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class PayrollBatchService {

    private final PayrollBatchRepository batchRepo;
    private final PayrollBatchPaymentRepository paymentRepo;

    @Autowired
    public PayrollBatchService(PayrollBatchRepository batchRepo, PayrollBatchPaymentRepository paymentRepo) {
        this.batchRepo = batchRepo;
        this.paymentRepo = paymentRepo;
    }

    // Save a batch (with payments)
    public PayrollBatch saveBatch(PayrollBatch batch) {
        batch.setCreatedAt(LocalDateTime.now());
        // Make sure all payments reference this batch
        if (batch.getPayments() != null) {
            for (PayrollBatchPayment payment : batch.getPayments()) {
                payment.setBatch(batch);
            }
        }
        return batchRepo.save(batch);
    }

    // Get all batches
    public List<PayrollBatch> getAllBatches() {
        return batchRepo.findAll();
    }

    // Find by batch reference (unique)
    public Optional<PayrollBatch> getBatchByReference(String reference) {
        return batchRepo.findAll().stream()
                .filter(batch -> batch.getBatchReference().equals(reference))
                .findFirst();
    }

    // Get all payments by batch reference
    public List<PayrollBatchPayment> getPaymentsByBatch(PayrollBatch batch) {
        return batch.getPayments();
    }
}


{
  "batchReference": "BATCH001",
  "createdBy": "admin",
  "debitAccount": "12345678",
  "maxDebitAmount": 100000,
  "totalDebitAmount": 50000,
  "status": "PENDING",
  "payments": [
    {
      "employeeId": "EMP001",
      "employeeName": "John Doe",
      "salaryAmount": 25000,
      "currency": "INR",
      "employeeAccountNo": "9999912345",
      "status": "PENDING"
    },
    {
      "employeeId": "EMP002",
      "employeeName": "Jane Smith",
      "salaryAmount": 25000,
      "currency": "INR",
      "employeeAccountNo": "9999945678",
      "status": "PENDING"
    }
  ]
}
